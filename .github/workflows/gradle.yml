name: Memoraize Dev CI/CD

on:
  push:
    branches: [ "ci/#4" ]
  pull_request:
    branches: [ "dev" ]
  workflow_dispatch:


permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    # JDK 설정
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle build 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # application.yml 파일 생성
      - name: make application.yml
        run: |
          mkdir -p src/main/resources
          echo "$APPLICATION" > src/main/resources/application.properties
        env:
          APPLICATION: ${{ secrets.APPLICATION }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t app .
          docker tag app ${{ secrets.DOCKER_USERNAME }}/memoraize:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/memoraize:latest

      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/memoraize:latest
            sudo docker stop $(docker ps -a -q)
            sudo docker run -d --log-driver=syslog -p 8080:8080 -e SPRING_PROFILES_ACTIVE= ${{ secrets.DOCKER_USERNAME }}/memoraize:latest
            sudo docker rm $(docker ps --filter 'status=exited' -a -q)
            sudo docker image prune -a -f
   
